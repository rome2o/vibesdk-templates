var M=(e,t,r)=>(s,n)=>{let o=-1;return i(0);async function i(c){if(c<=o)throw new Error("next() called multiple times");o=c;let a,l=!1,h;if(e[c]?(h=e[c][0][0],s.req.routeIndex=c):h=c===e.length&&n||void 0,h)try{a=await h(s,()=>i(c+1))}catch(u){if(u instanceof Error&&t)s.error=u,a=await t(u,s),l=!0;else throw u}else s.finalized===!1&&r&&(a=await r(s));return a&&(s.finalized===!1||l)&&(s.res=a),s}},oe=Symbol(),ie=async(e,t=Object.create(null))=>{const{all:r=!1,dot:s=!1}=t,o=(e instanceof G?e.raw.headers:e.headers).get("Content-Type");return o?.startsWith("multipart/form-data")||o?.startsWith("application/x-www-form-urlencoded")?ae(e,{all:r,dot:s}):{}};async function ae(e,t){const r=await e.formData();return r?ce(r,t):{}}function ce(e,t){const r=Object.create(null);return e.forEach((s,n)=>{t.all||n.endsWith("[]")?le(r,n,s):r[n]=s}),t.dot&&Object.entries(r).forEach(([s,n])=>{s.includes(".")&&(he(r,s,n),delete r[s])}),r}var le=(e,t,r)=>{e[t]!==void 0?Array.isArray(e[t])?e[t].push(r):e[t]=[e[t],r]:t.endsWith("[]")?e[t]=[r]:e[t]=r},he=(e,t,r)=>{let s=e;const n=t.split(".");n.forEach((o,i)=>{i===n.length-1?s[o]=r:((!s[o]||typeof s[o]!="object"||Array.isArray(s[o])||s[o]instanceof File)&&(s[o]=Object.create(null)),s=s[o])})},U=e=>{const t=e.split("/");return t[0]===""&&t.shift(),t},ue=e=>{const{groups:t,path:r}=fe(e),s=U(r);return de(s,t)},fe=e=>{const t=[];return e=e.replace(/\{[^}]+\}/g,(r,s)=>{const n=`@${s}`;return t.push([n,r]),n}),{groups:t,path:e}},de=(e,t)=>{for(let r=t.length-1;r>=0;r--){const[s]=t[r];for(let n=e.length-1;n>=0;n--)if(e[n].includes(s)){e[n]=e[n].replace(s,t[r][1]);break}}return e},H={},pe=(e,t)=>{if(e==="*")return"*";const r=e.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);if(r){const s=`${e}#${t}`;return H[s]||(r[2]?H[s]=t&&t[0]!==":"&&t[0]!=="*"?[s,r[1],new RegExp(`^${r[2]}(?=/${t})`)]:[e,r[1],new RegExp(`^${r[2]}$`)]:H[s]=[e,r[1],!0]),H[s]}return null},_=(e,t)=>{try{return t(e)}catch{return e.replace(/(?:%[0-9A-Fa-f]{2})+/g,r=>{try{return t(r)}catch{return r}})}},ge=e=>_(e,decodeURI),W=e=>{const t=e.url,r=t.indexOf("/",t.indexOf(":")+4);let s=r;for(;s<t.length;s++){const n=t.charCodeAt(s);if(n===37){const o=t.indexOf("?",s),i=t.slice(r,o===-1?void 0:o);return ge(i.includes("%25")?i.replace(/%25/g,"%2525"):i)}else if(n===63)break}return t.slice(r,s)},we=e=>{const t=W(e);return t.length>1&&t.at(-1)==="/"?t.slice(0,-1):t},b=(e,t,...r)=>(r.length&&(t=b(t,...r)),`${e?.[0]==="/"?"":"/"}${e}${t==="/"?"":`${e?.at(-1)==="/"?"":"/"}${t?.[0]==="/"?t.slice(1):t}`}`),V=e=>{if(e.charCodeAt(e.length-1)!==63||!e.includes(":"))return null;const t=e.split("/"),r=[];let s="";return t.forEach(n=>{if(n!==""&&!/\:/.test(n))s+="/"+n;else if(/\:/.test(n))if(/\?/.test(n)){r.length===0&&s===""?r.push("/"):r.push(s);const o=n.replace("?","");s+="/"+o,r.push(s)}else s+="/"+n}),r.filter((n,o,i)=>i.indexOf(n)===o)},D=e=>/[%+]/.test(e)?(e.indexOf("+")!==-1&&(e=e.replace(/\+/g," ")),e.indexOf("%")!==-1?_(e,z):e):e,K=(e,t,r)=>{let s;if(!r&&t&&!/[%+]/.test(t)){let i=e.indexOf(`?${t}`,8);for(i===-1&&(i=e.indexOf(`&${t}`,8));i!==-1;){const c=e.charCodeAt(i+t.length+1);if(c===61){const a=i+t.length+2,l=e.indexOf("&",a);return D(e.slice(a,l===-1?void 0:l))}else if(c==38||isNaN(c))return"";i=e.indexOf(`&${t}`,i+1)}if(s=/[%+]/.test(e),!s)return}const n={};s??=/[%+]/.test(e);let o=e.indexOf("?",8);for(;o!==-1;){const i=e.indexOf("&",o+1);let c=e.indexOf("=",o);c>i&&i!==-1&&(c=-1);let a=e.slice(o+1,c===-1?i===-1?void 0:i:c);if(s&&(a=D(a)),o=i,a==="")continue;let l;c===-1?l="":(l=e.slice(c+1,i===-1?void 0:i),s&&(l=D(l))),r?(n[a]&&Array.isArray(n[a])||(n[a]=[]),n[a].push(l)):n[a]??=l}return t?n[t]:n},ye=K,me=(e,t)=>K(e,t,!0),z=decodeURIComponent,F=e=>_(e,z),G=class{raw;#t;#e;routeIndex=0;path;bodyCache={};constructor(e,t="/",r=[[]]){this.raw=e,this.path=t,this.#e=r,this.#t={}}param(e){return e?this.#r(e):this.#o()}#r(e){const t=this.#e[0][this.routeIndex][1][e],r=this.#n(t);return r&&/\%/.test(r)?F(r):r}#o(){const e={},t=Object.keys(this.#e[0][this.routeIndex][1]);for(const r of t){const s=this.#n(this.#e[0][this.routeIndex][1][r]);s!==void 0&&(e[r]=/\%/.test(s)?F(s):s)}return e}#n(e){return this.#e[1]?this.#e[1][e]:e}query(e){return ye(this.url,e)}queries(e){return me(this.url,e)}header(e){if(e)return this.raw.headers.get(e)??void 0;const t={};return this.raw.headers.forEach((r,s)=>{t[s]=r}),t}async parseBody(e){return this.bodyCache.parsedBody??=await ie(this,e)}#s=e=>{const{bodyCache:t,raw:r}=this,s=t[e];if(s)return s;const n=Object.keys(t)[0];return n?t[n].then(o=>(n==="json"&&(o=JSON.stringify(o)),new Response(o)[e]())):t[e]=r[e]()};json(){return this.#s("text").then(e=>JSON.parse(e))}text(){return this.#s("text")}arrayBuffer(){return this.#s("arrayBuffer")}blob(){return this.#s("blob")}formData(){return this.#s("formData")}addValidatedData(e,t){this.#t[e]=t}valid(e){return this.#t[e]}get url(){return this.raw.url}get method(){return this.raw.method}get[oe](){return this.#e}get matchedRoutes(){return this.#e[0].map(([[,e]])=>e)}get routePath(){return this.#e[0].map(([[,e]])=>e)[this.routeIndex].path}},Re={Stringify:1},J=async(e,t,r,s,n)=>{typeof e=="object"&&!(e instanceof String)&&(e instanceof Promise||(e=e.toString()),e instanceof Promise&&(e=await e));const o=e.callbacks;return o?.length?(n?n[0]+=e:n=[e],Promise.all(o.map(c=>c({phase:t,buffer:n,context:s}))).then(c=>Promise.all(c.filter(Boolean).map(a=>J(a,t,!1,s,n))).then(()=>n[0]))):Promise.resolve(e)},Ee="text/plain; charset=UTF-8",L=(e,t)=>({"Content-Type":e,...t}),ve=class{#t;#e;env={};#r;finalized=!1;error;#o;#n;#s;#h;#c;#l;#a;#u;#f;constructor(e,t){this.#t=e,t&&(this.#n=t.executionCtx,this.env=t.env,this.#l=t.notFoundHandler,this.#f=t.path,this.#u=t.matchResult)}get req(){return this.#e??=new G(this.#t,this.#f,this.#u),this.#e}get event(){if(this.#n&&"respondWith"in this.#n)return this.#n;throw Error("This context has no FetchEvent")}get executionCtx(){if(this.#n)return this.#n;throw Error("This context has no ExecutionContext")}get res(){return this.#s||=new Response(null,{headers:this.#a??=new Headers})}set res(e){if(this.#s&&e){e=new Response(e.body,e);for(const[t,r]of this.#s.headers.entries())if(t!=="content-type")if(t==="set-cookie"){const s=this.#s.headers.getSetCookie();e.headers.delete("set-cookie");for(const n of s)e.headers.append("set-cookie",n)}else e.headers.set(t,r)}this.#s=e,this.finalized=!0}render=(...e)=>(this.#c??=t=>this.html(t),this.#c(...e));setLayout=e=>this.#h=e;getLayout=()=>this.#h;setRenderer=e=>{this.#c=e};header=(e,t,r)=>{this.finalized&&(this.#s=new Response(this.#s.body,this.#s));const s=this.#s?this.#s.headers:this.#a??=new Headers;t===void 0?s.delete(e):r?.append?s.append(e,t):s.set(e,t)};status=e=>{this.#o=e};set=(e,t)=>{this.#r??=new Map,this.#r.set(e,t)};get=e=>this.#r?this.#r.get(e):void 0;get var(){return this.#r?Object.fromEntries(this.#r):{}}#i(e,t,r){const s=this.#s?new Headers(this.#s.headers):this.#a??new Headers;if(typeof t=="object"&&"headers"in t){const o=t.headers instanceof Headers?t.headers:new Headers(t.headers);for(const[i,c]of o)i.toLowerCase()==="set-cookie"?s.append(i,c):s.set(i,c)}if(r)for(const[o,i]of Object.entries(r))if(typeof i=="string")s.set(o,i);else{s.delete(o);for(const c of i)s.append(o,c)}const n=typeof t=="number"?t:t?.status??this.#o;return new Response(e,{status:n,headers:s})}newResponse=(...e)=>this.#i(...e);body=(e,t,r)=>this.#i(e,t,r);text=(e,t,r)=>!this.#a&&!this.#o&&!t&&!r&&!this.finalized?new Response(e):this.#i(e,t,L(Ee,r));json=(e,t,r)=>this.#i(JSON.stringify(e),t,L("application/json",r));html=(e,t,r)=>{const s=n=>this.#i(n,t,L("text/html; charset=UTF-8",r));return typeof e=="object"?J(e,Re.Stringify,!1,{}).then(s):s(e)};redirect=(e,t)=>{const r=String(e);return this.header("Location",/[^\x00-\xFF]/.test(r)?encodeURI(r):r),this.newResponse(null,t??302)};notFound=()=>(this.#l??=()=>new Response,this.#l(this))},p="ALL",xe="all",Oe=["get","post","put","delete","options","patch"],Q="Can not add a route since the matcher is already built.",X=class extends Error{},be="__COMPOSED_HANDLER",je=e=>e.text("404 Not Found",404),q=(e,t)=>{if("getResponse"in e){const r=e.getResponse();return t.newResponse(r.body,r)}return console.error(e),t.text("Internal Server Error",500)},Y=class{get;post;put;delete;options;patch;all;on;use;router;getPath;_basePath="/";#t="/";routes=[];constructor(t={}){[...Oe,xe].forEach(o=>{this[o]=(i,...c)=>(typeof i=="string"?this.#t=i:this.#o(o,this.#t,i),c.forEach(a=>{this.#o(o,this.#t,a)}),this)}),this.on=(o,i,...c)=>{for(const a of[i].flat()){this.#t=a;for(const l of[o].flat())c.map(h=>{this.#o(l.toUpperCase(),this.#t,h)})}return this},this.use=(o,...i)=>(typeof o=="string"?this.#t=o:(this.#t="*",i.unshift(o)),i.forEach(c=>{this.#o(p,this.#t,c)}),this);const{strict:s,...n}=t;Object.assign(this,n),this.getPath=s??!0?t.getPath??W:we}#e(){const t=new Y({router:this.router,getPath:this.getPath});return t.errorHandler=this.errorHandler,t.#r=this.#r,t.routes=this.routes,t}#r=je;errorHandler=q;route(t,r){const s=this.basePath(t);return r.routes.map(n=>{let o;r.errorHandler===q?o=n.handler:(o=async(i,c)=>(await M([],r.errorHandler)(i,()=>n.handler(i,c))).res,o[be]=n.handler),s.#o(n.method,n.path,o)}),this}basePath(t){const r=this.#e();return r._basePath=b(this._basePath,t),r}onError=t=>(this.errorHandler=t,this);notFound=t=>(this.#r=t,this);mount(t,r,s){let n,o;s&&(typeof s=="function"?o=s:(o=s.optionHandler,s.replaceRequest===!1?n=a=>a:n=s.replaceRequest));const i=o?a=>{const l=o(a);return Array.isArray(l)?l:[l]}:a=>{let l;try{l=a.executionCtx}catch{}return[a.env,l]};n||=(()=>{const a=b(this._basePath,t),l=a==="/"?0:a.length;return h=>{const u=new URL(h.url);return u.pathname=u.pathname.slice(l)||"/",new Request(u,h)}})();const c=async(a,l)=>{const h=await r(n(a.req.raw),...i(a));if(h)return h;await l()};return this.#o(p,b(t,"*"),c),this}#o(t,r,s){t=t.toUpperCase(),r=b(this._basePath,r);const n={basePath:this._basePath,path:r,method:t,handler:s};this.router.add(t,r,[s,n]),this.routes.push(n)}#n(t,r){if(t instanceof Error)return this.errorHandler(t,r);throw t}#s(t,r,s,n){if(n==="HEAD")return(async()=>new Response(null,await this.#s(t,r,s,"GET")))();const o=this.getPath(t,{env:s}),i=this.router.match(n,o),c=new ve(t,{path:o,matchResult:i,env:s,executionCtx:r,notFoundHandler:this.#r});if(i[0].length===1){let l;try{l=i[0][0][0][0](c,async()=>{c.res=await this.#r(c)})}catch(h){return this.#n(h,c)}return l instanceof Promise?l.then(h=>h||(c.finalized?c.res:this.#r(c))).catch(h=>this.#n(h,c)):l??this.#r(c)}const a=M(i[0],this.errorHandler,this.#r);return(async()=>{try{const l=await a(c);if(!l.finalized)throw new Error("Context is not finalized. Did you forget to return a Response object or `await next()`?");return l.res}catch(l){return this.#n(l,c)}})()}fetch=(t,...r)=>this.#s(t,r[1],r[0],t.method);request=(t,r,s,n)=>t instanceof Request?this.fetch(r?new Request(t,r):t,s,n):(t=t.toString(),this.fetch(new Request(/^https?:\/\//.test(t)?t:`http://localhost${b("/",t)}`,r),s,n));fire=()=>{addEventListener("fetch",t=>{t.respondWith(this.#s(t.request,t,void 0,t.request.method))})}},T="[^/]+",S=".*",$="(?:|/.*)",j=Symbol(),Ae=new Set(".\\+*[^]$()");function Pe(e,t){return e.length===1?t.length===1?e<t?-1:1:-1:t.length===1||e===S||e===$?1:t===S||t===$?-1:e===T?1:t===T?-1:e.length===t.length?e<t?-1:1:t.length-e.length}var I=class{#t;#e;#r=Object.create(null);insert(t,r,s,n,o){if(t.length===0){if(this.#t!==void 0)throw j;if(o)return;this.#t=r;return}const[i,...c]=t,a=i==="*"?c.length===0?["","",S]:["","",T]:i==="/*"?["","",$]:i.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);let l;if(a){const h=a[1];let u=a[2]||T;if(h&&a[2]&&(u===".*"||(u=u.replace(/^\((?!\?:)(?=[^)]+\)$)/,"(?:"),/\((?!\?:)/.test(u))))throw j;if(l=this.#r[u],!l){if(Object.keys(this.#r).some(f=>f!==S&&f!==$))throw j;if(o)return;l=this.#r[u]=new I,h!==""&&(l.#e=n.varIndex++)}!o&&h!==""&&s.push([h,l.#e])}else if(l=this.#r[i],!l){if(Object.keys(this.#r).some(h=>h.length>1&&h!==S&&h!==$))throw j;if(o)return;l=this.#r[i]=new I}l.insert(c,r,s,n,o)}buildRegExpStr(){const r=Object.keys(this.#r).sort(Pe).map(s=>{const n=this.#r[s];return(typeof n.#e=="number"?`(${s})@${n.#e}`:Ae.has(s)?`\\${s}`:s)+n.buildRegExpStr()});return typeof this.#t=="number"&&r.unshift(`#${this.#t}`),r.length===0?"":r.length===1?r[0]:"(?:"+r.join("|")+")"}},Ce=class{#t={varIndex:0};#e=new I;insert(e,t,r){const s=[],n=[];for(let i=0;;){let c=!1;if(e=e.replace(/\{[^}]+\}/g,a=>{const l=`@\\${i}`;return n[i]=[l,a],i++,c=!0,l}),!c)break}const o=e.match(/(?::[^\/]+)|(?:\/\*$)|./g)||[];for(let i=n.length-1;i>=0;i--){const[c]=n[i];for(let a=o.length-1;a>=0;a--)if(o[a].indexOf(c)!==-1){o[a]=o[a].replace(c,n[i][1]);break}}return this.#e.insert(o,t,s,this.#t,r),s}buildRegExp(){let e=this.#e.buildRegExpStr();if(e==="")return[/^$/,[],[]];let t=0;const r=[],s=[];return e=e.replace(/#(\d+)|@(\d+)|\.\*\$/g,(n,o,i)=>o!==void 0?(r[++t]=Number(o),"$()"):(i!==void 0&&(s[Number(i)]=++t),"")),[new RegExp(`^${e}`),r,s]}},Z=[],Se=[/^$/,[],Object.create(null)],ee=Object.create(null);function te(e){return ee[e]??=new RegExp(e==="*"?"":`^${e.replace(/\/\*$|([.\\+*[^\]$()])/g,(t,r)=>r?`\\${r}`:"(?:|/.*)")}$`)}function $e(){ee=Object.create(null)}function He(e){const t=new Ce,r=[];if(e.length===0)return Se;const s=e.map(l=>[!/\*|\/:/.test(l[0]),...l]).sort(([l,h],[u,f])=>l?1:u?-1:h.length-f.length),n=Object.create(null);for(let l=0,h=-1,u=s.length;l<u;l++){const[f,w,d]=s[l];f?n[w]=[d.map(([y])=>[y,Object.create(null)]),Z]:h++;let g;try{g=t.insert(w,h,f)}catch(y){throw y===j?new X(w):y}f||(r[h]=d.map(([y,x])=>{const A=Object.create(null);for(x-=1;x>=0;x--){const[m,N]=g[x];A[m]=N}return[y,A]}))}const[o,i,c]=t.buildRegExp();for(let l=0,h=r.length;l<h;l++)for(let u=0,f=r[l].length;u<f;u++){const w=r[l][u]?.[1];if(!w)continue;const d=Object.keys(w);for(let g=0,y=d.length;g<y;g++)w[d[g]]=c[w[d[g]]]}const a=[];for(const l in i)a[l]=r[i[l]];return[o,a,n]}function O(e,t){if(e){for(const r of Object.keys(e).sort((s,n)=>n.length-s.length))if(te(r).test(t))return[...e[r]]}}var Te=class{name="RegExpRouter";#t;#e;constructor(){this.#t={[p]:Object.create(null)},this.#e={[p]:Object.create(null)}}add(e,t,r){const s=this.#t,n=this.#e;if(!s||!n)throw new Error(Q);s[e]||[s,n].forEach(c=>{c[e]=Object.create(null),Object.keys(c[p]).forEach(a=>{c[e][a]=[...c[p][a]]})}),t==="/*"&&(t="*");const o=(t.match(/\/:/g)||[]).length;if(/\*$/.test(t)){const c=te(t);e===p?Object.keys(s).forEach(a=>{s[a][t]||=O(s[a],t)||O(s[p],t)||[]}):s[e][t]||=O(s[e],t)||O(s[p],t)||[],Object.keys(s).forEach(a=>{(e===p||e===a)&&Object.keys(s[a]).forEach(l=>{c.test(l)&&s[a][l].push([r,o])})}),Object.keys(n).forEach(a=>{(e===p||e===a)&&Object.keys(n[a]).forEach(l=>c.test(l)&&n[a][l].push([r,o]))});return}const i=V(t)||[t];for(let c=0,a=i.length;c<a;c++){const l=i[c];Object.keys(n).forEach(h=>{(e===p||e===h)&&(n[h][l]||=[...O(s[h],l)||O(s[p],l)||[]],n[h][l].push([r,o-a+c+1]))})}}match(e,t){$e();const r=this.#r();return this.match=(s,n)=>{const o=r[s]||r[p],i=o[2][n];if(i)return i;const c=n.match(o[0]);if(!c)return[[],Z];const a=c.indexOf("",1);return[o[1][a],c]},this.match(e,t)}#r(){const e=Object.create(null);return Object.keys(this.#e).concat(Object.keys(this.#t)).forEach(t=>{e[t]||=this.#o(t)}),this.#t=this.#e=void 0,e}#o(e){const t=[];let r=e===p;return[this.#t,this.#e].forEach(s=>{const n=s[e]?Object.keys(s[e]).map(o=>[o,s[e][o]]):[];n.length!==0?(r||=!0,t.push(...n)):e!==p&&t.push(...Object.keys(s[p]).map(o=>[o,s[p][o]]))}),r?He(t):null}},Ne=class{name="SmartRouter";#t=[];#e=[];constructor(e){this.#t=e.routers}add(e,t,r){if(!this.#e)throw new Error(Q);this.#e.push([e,t,r])}match(e,t){if(!this.#e)throw new Error("Fatal error");const r=this.#t,s=this.#e,n=r.length;let o=0,i;for(;o<n;o++){const c=r[o];try{for(let a=0,l=s.length;a<l;a++)c.add(...s[a]);i=c.match(e,t)}catch(a){if(a instanceof X)continue;throw a}this.match=c.match.bind(c),this.#t=[c],this.#e=void 0;break}if(o===n)throw new Error("Fatal error");return this.name=`SmartRouter + ${this.activeRouter.name}`,i}get activeRouter(){if(this.#e||this.#t.length!==1)throw new Error("No active router has been determined yet.");return this.#t[0]}},C=Object.create(null),re=class{#t;#e;#r;#o=0;#n=C;constructor(e,t,r){if(this.#e=r||Object.create(null),this.#t=[],e&&t){const s=Object.create(null);s[e]={handler:t,possibleKeys:[],score:0},this.#t=[s]}this.#r=[]}insert(e,t,r){this.#o=++this.#o;let s=this;const n=ue(t),o=[];for(let i=0,c=n.length;i<c;i++){const a=n[i],l=n[i+1],h=pe(a,l),u=Array.isArray(h)?h[0]:a;if(u in s.#e){s=s.#e[u],h&&o.push(h[1]);continue}s.#e[u]=new re,h&&(s.#r.push(h),o.push(h[1])),s=s.#e[u]}return s.#t.push({[e]:{handler:r,possibleKeys:o.filter((i,c,a)=>a.indexOf(i)===c),score:this.#o}}),s}#s(e,t,r,s){const n=[];for(let o=0,i=e.#t.length;o<i;o++){const c=e.#t[o],a=c[t]||c[p],l={};if(a!==void 0&&(a.params=Object.create(null),n.push(a),r!==C||s&&s!==C))for(let h=0,u=a.possibleKeys.length;h<u;h++){const f=a.possibleKeys[h],w=l[a.score];a.params[f]=s?.[f]&&!w?s[f]:r[f]??s?.[f],l[a.score]=!0}}return n}search(e,t){const r=[];this.#n=C;let n=[this];const o=U(t),i=[];for(let c=0,a=o.length;c<a;c++){const l=o[c],h=c===a-1,u=[];for(let f=0,w=n.length;f<w;f++){const d=n[f],g=d.#e[l];g&&(g.#n=d.#n,h?(g.#e["*"]&&r.push(...this.#s(g.#e["*"],e,d.#n)),r.push(...this.#s(g,e,d.#n))):u.push(g));for(let y=0,x=d.#r.length;y<x;y++){const A=d.#r[y],m=d.#n===C?{}:{...d.#n};if(A==="*"){const E=d.#e["*"];E&&(r.push(...this.#s(E,e,d.#n)),E.#n=m,u.push(E));continue}const[N,k,P]=A;if(!l&&!(P instanceof RegExp))continue;const R=d.#e[N],se=o.slice(c).join("/");if(P instanceof RegExp){const E=P.exec(se);if(E){if(m[k]=E[0],r.push(...this.#s(R,e,d.#n,m)),Object.keys(R.#e).length){R.#n=m;const ne=E[0].match(/\//)?.length??0;(i[ne]||=[]).push(R)}continue}}(P===!0||P.test(l))&&(m[k]=l,h?(r.push(...this.#s(R,e,m,d.#n)),R.#e["*"]&&r.push(...this.#s(R.#e["*"],e,m,d.#n))):(R.#n=m,u.push(R)))}}n=u.concat(i.shift()??[])}return r.length>1&&r.sort((c,a)=>c.score-a.score),[r.map(({handler:c,params:a})=>[c,a])]}},De=class{name="TrieRouter";#t;constructor(){this.#t=new re}add(e,t,r){const s=V(t);if(s){for(let n=0,o=s.length;n<o;n++)this.#t.insert(e,s[n],r);return}this.#t.insert(e,t,r)}match(e,t){return this.#t.search(e,t)}},Le=class extends Y{constructor(e={}){super(e),this.router=e.router??new Ne({routers:[new Te,new De]})}},Ie=e=>{const r={...{origin:"*",allowMethods:["GET","HEAD","PUT","POST","DELETE","PATCH"],allowHeaders:[],exposeHeaders:[]},...e},s=(o=>typeof o=="string"?o==="*"?()=>o:i=>o===i?i:null:typeof o=="function"?o:i=>o.includes(i)?i:null)(r.origin),n=(o=>typeof o=="function"?o:Array.isArray(o)?()=>o:()=>[])(r.allowMethods);return async function(i,c){function a(h,u){i.res.headers.set(h,u)}const l=await s(i.req.header("origin")||"",i);if(l&&a("Access-Control-Allow-Origin",l),r.origin!=="*"){const h=i.req.header("Vary");h?a("Vary",h):a("Vary","Origin")}if(r.credentials&&a("Access-Control-Allow-Credentials","true"),r.exposeHeaders?.length&&a("Access-Control-Expose-Headers",r.exposeHeaders.join(",")),i.req.method==="OPTIONS"){r.maxAge!=null&&a("Access-Control-Max-Age",r.maxAge.toString());const h=await n(i.req.header("origin")||"",i);h.length&&a("Access-Control-Allow-Methods",h.join(","));let u=r.allowHeaders;if(!u?.length){const f=i.req.header("Access-Control-Request-Headers");f&&(u=f.split(/\s*,\s*/))}return u?.length&&(a("Access-Control-Allow-Headers",u.join(",")),i.res.headers.append("Vary","Access-Control-Request-Headers")),i.res.headers.delete("Content-Length"),i.res.headers.delete("Content-Type"),new Response(null,{headers:i.res.headers,status:204,statusText:"No Content"})}await c()}};function _e(){const{process:e,Deno:t}=globalThis;return!(typeof t?.noColor=="boolean"?t.noColor:e!==void 0?"NO_COLOR"in e?.env:!1)}async function ke(){const{navigator:e}=globalThis,t="cloudflare:workers";return!(e!==void 0&&e.userAgent==="Cloudflare-Workers"?await(async()=>{try{return"NO_COLOR"in((await import(t)).env??{})}catch{return!1}})():!_e())}var Me=e=>{const[t,r]=[",","."];return e.map(n=>n.replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1"+t)).join(r)},Fe=e=>{const t=Date.now()-e;return Me([t<1e3?t+"ms":Math.round(t/1e3)+"s"])},qe=async e=>{if(await ke())switch(e/100|0){case 5:return`\x1B[31m${e}\x1B[0m`;case 4:return`\x1B[33m${e}\x1B[0m`;case 3:return`\x1B[36m${e}\x1B[0m`;case 2:return`\x1B[32m${e}\x1B[0m`}return`${e}`};async function B(e,t,r,s,n=0,o){const i=t==="<--"?`${t} ${r} ${s}`:`${t} ${r} ${s} ${await qe(n)} ${o}`;e(i)}var Be=(e=console.log)=>async function(r,s){const{method:n,url:o}=r.req,i=o.slice(o.indexOf("/",8));await B(e,"<--",n,i);const c=Date.now();await s(),await B(e,"-->",n,i,r.res.status,Fe(c))};function Ue(e){e.get("/api/test",t=>t.json({success:!0,data:{name:"this works"}}))}const v=new Le;v.use("*",Be());v.use("/api/*",Ie({origin:"*",allowMethods:["GET","POST","PUT","DELETE","OPTIONS"],allowHeaders:["Content-Type","Authorization"]}));Ue(v);v.get("/api/health",e=>e.json({success:!0,data:{status:"healthy",timestamp:new Date().toISOString()}}));v.post("/api/client-errors",async e=>{try{const t=await e.req.json();return!t.message||!t.url||!t.userAgent?e.json({success:!1,error:"Missing required fields"},400):(console.error("[CLIENT ERROR]",JSON.stringify({timestamp:t.timestamp||new Date().toISOString(),message:t.message,url:t.url,userAgent:t.userAgent,stack:t.stack,componentStack:t.componentStack,errorBoundary:t.errorBoundary,source:t.source,lineno:t.lineno,colno:t.colno},null,2)),e.json({success:!0}))}catch(t){return console.error("[CLIENT ERROR HANDLER] Failed:",t),e.json({success:!1,error:"Failed to process"},500)}});v.notFound(e=>e.json({success:!1,error:"Not Found"},404));v.onError((e,t)=>(console.error(`[ERROR] ${e}`),t.json({success:!1,error:"Internal Server Error"},500)));console.log("Server is running");const We={fetch:v.fetch},Ge=We??{};export{Ge as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
